name: Lighthouse CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: write
  checks: write
  pull-requests: write
  issues: write
  statuses: write

jobs:
  lighthouse:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.bun/install/cache
            .next/cache
            /root/.cache/puppeteer
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb', '**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install

      - name: Test Supabase Connection
        run: bun tests/scripts/test-supabase-connection.ts
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}

      - name: Build
        run: bun run build
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          NODE_ENV: production

      - name: Run Lighthouse CI
        run: bun tests/scripts/run-lighthouse.ts
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          NODE_ENV: production
          LHCI_BUILD_CONTEXT__CURRENT_BRANCH: ${{ github.ref_name }}
          LHCI_BUILD_CONTEXT__CURRENT_HASH: ${{ github.sha }}

      - name: Process Lighthouse Results
        id: lighthouse
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            
            try {
              const resultsDir = '.lighthouseci';
              const files = fs.readdirSync(resultsDir).filter(f => f.endsWith('.json'));
              
              if (files.length === 0) {
                throw new Error('No Lighthouse results found');
              }
              
              const results = files
                .map(f => JSON.parse(fs.readFileSync(path.join(resultsDir, f))))
                .sort((a, b) => b.fetchTime - a.fetchTime);
              
              const latestResult = results[0];
              const scores = {
                performance: Math.round(latestResult.categories.performance.score * 100),
                accessibility: Math.round(latestResult.categories.accessibility.score * 100),
                bestPractices: Math.round(latestResult.categories['best-practices'].score * 100),
                seo: Math.round(latestResult.categories.seo.score * 100),
                pwa: Math.round(latestResult.categories.pwa.score * 100)
              };
              
              const readmePath = 'README.md';
              let readme = fs.readFileSync(readmePath, 'utf8');
              
              const workflowUrl = `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/workflows/lighthouse.yml`;
              
              const scoreSection = [
                '## Lighthouse スコア',
                '',
                `[![Performance: ${scores.performance}](https://img.shields.io/badge/Performance-${scores.performance}%25-${scores.performance >= 90 ? 'success' : 'orange'})](${workflowUrl})`,
                `[![Accessibility: ${scores.accessibility}](https://img.shields.io/badge/Accessibility-${scores.accessibility}%25-${scores.accessibility >= 90 ? 'success' : 'orange'})](${workflowUrl})`,
                `[![Best Practices: ${scores.bestPractices}](https://img.shields.io/badge/Best%20Practices-${scores.bestPractices}%25-${scores.bestPractices >= 90 ? 'success' : 'orange'})](${workflowUrl})`,
                `[![SEO: ${scores.seo}](https://img.shields.io/badge/SEO-${scores.seo}%25-${scores.seo >= 90 ? 'success' : 'orange'})](${workflowUrl})`,
                `[![PWA: ${scores.pwa}](https://img.shields.io/badge/PWA-${scores.pwa}%25-${scores.pwa >= 90 ? 'success' : 'orange'})](${workflowUrl})`,
                '',
                `*Last updated: ${new Date().toISOString().split('T')[0]}*`,
                ''
              ].join('\n');
              
              const lighthouseRegex = /## Lighthouse スコア[\s\S]*?\n\n/;
              if (lighthouseRegex.test(readme)) {
                readme = readme.replace(lighthouseRegex, scoreSection);
              } else {
                const featuresIndex = readme.indexOf('## 特徴');
                if (featuresIndex !== -1) {
                  readme = readme.slice(0, featuresIndex) + scoreSection + readme.slice(featuresIndex);
                }
              }
              
              fs.writeFileSync(readmePath, readme);
              
              // コミットとプッシュ
              const exec = require('child_process').execSync;
              exec('git config --global user.name "github-actions[bot]"');
              exec('git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"');
              exec('git add README.md');
              exec('git commit -m "docs: 🚀 Lighthouseスコアを更新"');
              exec('git push');
              
              return {
                scores,
                success: true
              };
            } catch (error) {
              core.setFailed(`Error processing Lighthouse results: ${error.message}`);
              return {
                success: false,
                error: error.message
              };
            }

      - name: Save Lighthouse results
        uses: actions/upload-artifact@v3
        with:
          name: lighthouse-results
          path: .lighthouseci
          if-no-files-found: error
          retention-days: 7

      - name: Notify on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            let errorDetails = 'No detailed results available';
            
            try {
              const files = fs.readdirSync('.lighthouseci').filter(f => f.endsWith('.json'));
              if (files.length > 0) {
                const results = files.map(f => JSON.parse(fs.readFileSync(`.lighthouseci/${f}`)))
                  .filter(r => r.categories?.performance?.score < 0.9);
                
                if (results.length > 0) {
                  errorDetails = results.map(r => {
                    const score = (r.categories.performance.score * 100).toFixed(1);
                    const fcp = (r.audits['first-contentful-paint'].numericValue / 1000).toFixed(2);
                    const tti = (r.audits.interactive.numericValue / 1000).toFixed(2);
                    const tbt = r.audits['total-blocking-time'].numericValue.toFixed(0);
                    const cls = r.audits['cumulative-layout-shift'].numericValue.toFixed(3);
                    const lcp = (r.audits['largest-contentful-paint'].numericValue / 1000).toFixed(2);
                    
                    return [
                      `Performance Score: ${score}%`,
                      `First Contentful Paint: ${fcp}s`,
                      `Time to Interactive: ${tti}s`,
                      `Total Blocking Time: ${tbt}ms`,
                      `Cumulative Layout Shift: ${cls}`,
                      `Largest Contentful Paint: ${lcp}s`
                    ].join('\n');
                  }).join('\n\n');
                }
              }
            } catch (e) {
              errorDetails = `Error parsing results: ${e.message}`;
            }
            
            const issueBody = [
              `Lighthouse CI failed on commit ${context.sha}`,
              '',
              '### Performance Metrics',
              '```',
              errorDetails,
              '```',
              '',
              '### Links',
              `- [Workflow Run](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})`,
              `- [Commit](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/commit/${context.sha})`,
              '',
              'Please review the performance metrics and make necessary optimizations.'
            ].join('\n');
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🚨 Lighthouse CI Failed: Performance Issues Detected',
              body: issueBody,
              labels: ['performance', 'lighthouse-ci']
            });