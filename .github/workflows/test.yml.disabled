name: Test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      test-chunks: ${{ steps.split-tests.outputs.chunks }}
    steps:
      - uses: actions/checkout@v4

      - name: Split tests into chunks
        id: split-tests
        run: |
          TESTS=$(find tests -name "*.test.ts" -o -name "*.spec.ts" | jq -R -s -c 'split("\n")[:-1]')
          echo "chunks=$TESTS" >> $GITHUB_OUTPUT

  test:
    needs: prepare
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        shard: [1, 2, 3, 4]
        test-file: ${{ fromJson(needs.prepare.outputs.test-chunks) }}

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      # 依存関係のキャッシュ
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.bun/install/cache
            .bun-cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}-
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install

      # Playwrightのセットアップ
      - name: Install Playwright browsers
        run: bunx playwright install --with-deps chromium
        if: endsWith(matrix.test-file, '.spec.ts')

      # テストの実行
      - name: Run tests
        run: |
          if [[ "${{ matrix.test-file }}" == *".spec.ts" ]]; then
            SHARDS_TOTAL=4 SHARD_NUMBER=${{ matrix.shard }} bun test:e2e "${{ matrix.test-file }}"
          else
            SHARDS_TOTAL=4 SHARD_NUMBER=${{ matrix.shard }} bun test "${{ matrix.test-file }}"
          fi
        env:
          NODE_ENV: test
          NEXT_PUBLIC_SUPABASE_URL: http://localhost:54321
          NEXT_PUBLIC_SUPABASE_ANON_KEY: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.CRXP1A7WOeoJeXxjNni43kdQwgnWNReilDMblYTn_I0
          PLAYWRIGHT_TEST_BASE_URL: http://localhost:3000

      # テストレポートのアップロード
      - name: Upload test reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports-${{ matrix.shard }}
          path: |
            tests/reports/
            coverage/
          retention-days: 30

  # テストレポートの集計
  report:
    needs: test
    runs-on: ubuntu-latest
    if: always()
    steps:
      - uses: actions/checkout@v4

      - name: Download all test reports
        uses: actions/download-artifact@v4
        with:
          path: all-reports
          pattern: test-reports-*
          merge-multiple: true

      # カバレッジレポートの集計とアップロード
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: all-reports/coverage
          flags: unittests,integrationtests,e2etests
          name: codecov-umbrella
          fail_ci_if_error: true
          verbose: true