name: データソースとテスト環境の整備

description: |
  モックデータとSupabaseの実データを統一的に管理し、
  環境ごとの適切なデータ管理とテスト環境の整備を行う

目的: |
  1. 開発効率の向上
     - 開発環境でのモックデータ利用を容易に
     - テストの信頼性向上
     - 環境間のデータ整合性確保

  2. データ管理の簡素化
     - モックデータとSupabaseデータの二重管理を解消
     - 環境ごとのデータ管理を明確化

  3. テスト環境の安定化
     - テストの信頼性向上
     - CI/CDパイプラインの安定化

アプローチ: |
  1. シンプルな構成を維持
     - 開発時はsupabase startで開発環境を起動
     - seed.sqlで初期データを投入
     - テスト時はsupabase dbのリセット機能を使用

  2. テストデータの管理
     - モックデータはテスト用途に限定
     - テストはモックデータに依存
     - テスト用のsupabaseインスタンスを使用

  3. 本番環境の管理
     - マイグレーションのみを適用
     - 必要最小限のシードデータを投入

status:
  completed:
    - DataSourceインターフェースの定義
    - 環境変数の設定
    - package.jsonスクリプトの追加
    - MockDataSourceの実装
    - テストヘルパーの実装
    - SupabaseDataSourceの実装
    - シードデータの整備
    - マイグレーション管理の設定
    - GitHub Actionsの更新
    - デプロイフローの整備
    - テストの修正
      - bun-testの設定問題を解決
      - Tech Stacks APIテストの不一致を修正
      - E2Eテストのポート競合を解決
    - 型の整合性チェック
      - Supabaseの型生成
      - スキーマの同期
    - パフォーマンステスト
      - キャッシュ戦略の検証
      - 並列実行の最適化

  in_progress: []

  pending: []

concerns:
  - デプロイ：環境別のデータ整合性確認

振り返り: |
  1. 実装の課題
     - APIルートが直接モックデータを参照している問題を発見
     - データソースの抽象化が不完全
     - キャッシュ戦略が分散している

  2. 改善の方向性
     - DataSourceインターフェースの一貫した使用
     - 環境変数による切り替えの徹底
     - キャッシュ戦略のDataSource層への統合

  3. 学んだこと
     - アーキテクチャの一貫性の重要性
     - テスト環境の適切な分離
     - データ管理の統一的なアプローチ

次のタスク: |
  tasks/api-route-refactor.task

  1. 目的
     - APIルートのリファクタリング
     - DataSourceインターフェースの一貫した使用
     - キャッシュ戦略の統合

  2. アプローチ
     - APIルートでのDataSource使用
     - 環境変数による切り替え
     - キャッシュ戦略の移行

  3. 期待される効果
     - アーキテクチャの一貫性向上
     - テストの容易性向上
     - 環境切り替えの簡素化

validation:
  - 全てのテストが成功すること
  - 型チェックが通ること
  - デプロイが正常に完了すること
  - パフォーマンス指標が基準を満たすこと

notes: |
  - シンプルな構成を維持することを優先
  - 開発環境とテスト環境の分離を明確に
  - データの一貫性よりも運用の容易さを重視