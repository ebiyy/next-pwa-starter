name: Lighthouse ScoreのGitHubプロジェクトページ反映（実装ガイド）
description: 現状分析と具体的な実装手順
title: "[Task]: Lighthouse Score GitHub連携の最適化実装"
labels: ["performance", "documentation"]
body:
  - type: markdown
    attributes:
      value: |
        Lighthouse ScoreをGitHubプロジェクトページに反映するための詳細な実装ガイド

  - type: textarea
    id: prerequisites
    attributes:
      label: 前提条件
      description: タスク実行に必要な環境と設定
      value: |
        ### 必要な環境
        - Node.js: v18以上
        - bun: 最新版
        - GitHub CLI (gh): インストール済み
        - Chrome: 最新版（Lighthouse用）

        ### 既存の設定ファイル
        ```
        /
        ├── .github/
        │   └── workflows/
        │       └── lighthouse.yml  # GitHub Actions設定
        ├── lighthouserc.json      # Lighthouse CI設定
        └── next.config.ts         # Next.js設定
        ```

        ### 環境変数
        ```bash
        NEXT_PUBLIC_SUPABASE_URL=
        NEXT_PUBLIC_SUPABASE_ANON_KEY=
        LHCI_GITHUB_APP_TOKEN=     # 新規追加必要
        ```

  - type: textarea
    id: current-analysis
    attributes:
      label: 現状分析
      description: 現在の設定状況の分析と実装進捗
      value: |
        ### 実装状況

        #### 1. バッジ生成システム
        - ✅ スクリプト作成: scripts/lighthouse/generate-badges.ts
        - ✅ スコア抽出ロジック
        - ✅ バッジURL生成

        #### 2. CI/CD設定
        - ✅ lighthouserc.jsonの更新
        - ✅ GitHub Actionsワークフローの更新
        - ❌ 権限設定の調整（現在対応中）

        #### 3. READMEの更新
        - ✅ バッジ表示形式の変更
        - ✅ 自動更新の仕組み

        ### 実装完了
        1. バッジ生成システム
           - ✅ Lighthouse結果の自動取得
           - ✅ スコアに基づくバッジ生成
           - ✅ READMEの自動更新

        2. GitHub Actions連携
           - ✅ ワークフローの最適化
           - ✅ エラーハンドリングの改善
           - ✅ 権限設定の調整

        3. 動作確認
           - ✅ Lighthouse CIの実行
           - ✅ バッジの生成と更新
           - ✅ READMEへの反映

        ### 最終設定
        - Lighthouse CI: `temporary-public-storage`を使用
        - GitHub Token: `GITHUB_TOKEN`で認証
        - 権限: `contents: write`で設定
        - バッジ: shields.ioを使用

        ### 運用上の注意点
        - プルリクエストとメインブランチへのプッシュで自動実行
        - スコアが90%未満の場合は警告
        - バッジは最新の実行結果を反映

        ### 振り返り
        #### 実装プロセス
        1. 段階的な実装アプローチ
           - 基本機能の実装（Lighthouse CI）
           - バッジ生成システムの追加
           - GitHub Actions連携の最適化

        2. 問題解決
           - Lighthouse結果ファイルの取り扱い改善
           - GitHub Actionsの権限調整
           - エラーハンドリングの強化

        #### 学んだこと
        1. Lighthouse CIの特性
           - 結果の保存方法（temporary-public-storage vs lhci）
           - スコア基準の設定方法
           - GitHub連携のオプション

        2. GitHub Actions
           - 権限管理の重要性（contents: write）
           - ステップ間のファイル共有
           - エラーハンドリングの方法

        3. 自動化のベストプラクティス
           - 処理の統合による安定性向上
           - 適切なエラー通知
           - 結果の可視化

        #### 今後の改善点
        1. パフォーマンス最適化
           - Lighthouse実行の高速化
           - キャッシュ戦略の改善
           - 並列実行の検討

        2. レポート機能の拡張
           - 詳細なスコア分析
           - トレンド分析
           - カスタムメトリクスの追加
      value: |
        ### 1. lighthouserc.json
        #### 現状
        ```json
        {
          "ci": {
            "collect": {
              "numberOfRuns": 3,
              "startServerCommand": "bun run start",
              "url": ["http://localhost:3000"],
              "settings": {
                "preset": "desktop",
                "chromeFlags": ["--no-sandbox", "--disable-gpu"]
              }
            },
            "upload": {
              "target": "temporary-public-storage"
            },
            "assert": {
              "assertions": {
                "categories:performance": ["error", { "minScore": 0.9 }],
                "categories:accessibility": ["error", { "minScore": 0.9 }],
                "categories:best-practices": ["error", { "minScore": 0.9 }],
                "categories:seo": ["error", { "minScore": 0.9 }]
              }
            }
          }
        }
        ```

        ### 2. lighthouse.yml
        #### 現状の設定
        ```yaml
        permissions:
          contents: read
          checks: write
          statuses: write
          pull-requests: write
          issues: write

        env:
          NODE_ENV: production
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
        ```

        ### 3. next.config.ts
        #### 現状の最適化設定
        ```typescript
        experimental: {
          turbo: {
            rules: {
              "*.js": ["static"],
              "*.ts": ["static"],
              "*.tsx": ["static"],
              "*.css": ["static"],
            },
          },
          optimizePackageImports: ["@radix-ui/react-icons", "lucide-react"],
        }
        ```

  - type: textarea
    id: implementation-steps
    attributes:
      label: 実装手順
      description: 詳細な実装ステップ
      value: |
        ### 1. GitHub App設定
        ```bash
        # 1. GitHub Appの作成
        gh api \
          --method POST \
          /user/apps \
          -f name='Lighthouse CI App' \
          -f url='https://github.com/apps/lighthouse-ci' \
          -f hook_attributes[url]='https://lighthouse-ci.appspot.com/webhook'

        # 2. 必要な権限の設定
        - Repository permissions
          - Checks: Read & write
          - Pull requests: Read & write
          - Actions: Read & write

        # 3. トークンの取得
        - アプリケーションの設定ページからトークンを生成
        - GitHubリポジトリのSecretsに追加
        ```

        ### 2. Lighthouse CI設定更新
        ```bash
        # 1. lighthouserc.jsonの更新
        {
          "ci": {
            "collect": {
              // 既存の設定を維持
            },
            "upload": {
              "target": "lhci",
              "serverBaseUrl": "https://lighthouse-ci.appspot.com/",
              "token": "$LHCI_GITHUB_APP_TOKEN"
            },
            "assert": {
              // 既存の設定を維持
            }
          }
        }

        # 2. 設定のテスト
        bunx @lhci/cli@0.14.x autorun --config=./lighthouserc.json
        ```

        ### 3. バッジシステム実装
        ```bash
        # 1. スクリプトディレクトリの作成
        mkdir -p scripts/lighthouse

        # 2. バッジ生成スクリプトの作成
        touch scripts/lighthouse/generate-badges.ts

        # スクリプト内容
        import { readFileSync, writeFileSync } from 'fs';
        import { join } from 'path';

        const generateBadges = async () => {
          const lhrPath = join(process.cwd(), '.lighthouseci', 'lhr.json');
          const lhr = JSON.parse(readFileSync(lhrPath, 'utf8'));
          
          // スコアの抽出と保存
          const scores = {
            performance: Math.round(lhr.categories.performance.score * 100),
            accessibility: Math.round(lhr.categories.accessibility.score * 100),
            bestPractices: Math.round(lhr.categories['best-practices'].score * 100),
            seo: Math.round(lhr.categories.seo.score * 100)
          };

          // バッジの生成
          Object.entries(scores).forEach(([category, score]) => {
            const color = score >= 90 ? 'brightgreen' : 
                         score >= 80 ? 'green' : 
                         score >= 70 ? 'yellow' : 'red';
            
            const badgeUrl = `https://img.shields.io/badge/${category}-${score}-${color}`;
            // バッジ情報の保存
            writeFileSync(
              join(process.cwd(), '.github', 'badges', `${category}.json`),
              JSON.stringify({ url: badgeUrl, score })
            );
          });
        };

        generateBadges().catch(console.error);
        ```

        ### 4. GitHub Actions更新
        ```yaml
        # lighthouse.ymlに追加
        - name: Generate Lighthouse Badges
          if: success()
          run: |
            mkdir -p .github/badges
            bun run scripts/lighthouse/generate-badges.ts

        - name: Update README
          if: success()
          run: |
            # バッジURLの取得と更新
            performance_url=$(jq -r .url .github/badges/performance.json)
            # READMEの更新（sedコマンド使用）
            sed -i "s|!\[Performance\]([^)]*)|![Performance](${performance_url})|" README.md
        ```

  - type: textarea
    id: verification
    attributes:
      label: 検証方法
      description: 実装の検証手順
      value: |
        ### 1. ローカルでの検証
        ```bash
        # 1. 設定の検証
        bunx @lhci/cli@0.14.x autorun

        # 2. バッジ生成の検証
        bun run scripts/lighthouse/generate-badges.ts

        # 3. README更新の確認
        git diff README.md
        ```

        ### 2. CI/CDでの検証
        ```bash
        # 1. GitHub Actionsの実行確認
        gh run list --workflow lighthouse.yml

        # 2. 実行ログの確認
        gh run view --log

        # 3. バッジの表示確認
        gh browse  # GitHubページを開いてREADMEを確認
        ```

  - type: textarea
    id: troubleshooting
    attributes:
      label: トラブルシューティング
      description: 想定される問題と対処方法
      value: |
        ### 1. GitHub App認証エラー
        ```bash
        # エラー: LHCI_GITHUB_APP_TOKEN is not set
        # 対処:
        1. トークンの再生成
        2. GitHub Secretsの確認
        3. ワークフローでの環境変数設定確認
        ```

        ### 2. Lighthouse実行エラー
        ```bash
        # エラー: Chrome could not be found
        # 対処:
        1. setup-chromeアクションの確認
        2. Chrome flags設定の見直し
        ```

        ### 3. バッジ更新エラー
        ```bash
        # エラー: Could not update README
        # 対処:
        1. パーミッションの確認
        2. ファイルパスの確認
        3. sedコマンドの構文確認
        ```

  - type: textarea
    id: rollback
    attributes:
      label: ロールバック手順
      description: 問題発生時の復旧手順
      value: |
        ### 1. 設定のロールバック
        ```bash
        # 1. lighthouserc.jsonの復元
        git checkout main -- lighthouserc.json

        # 2. GitHub Actionsの復元
        git checkout main -- .github/workflows/lighthouse.yml
        ```

        ### 2. GitHub App設定の削除
        ```bash
        # 1. GitHub Appのアンインストール
        gh api --method DELETE /app/installations/:installation_id

        # 2. Secretsの削除
        gh secret remove LHCI_GITHUB_APP_TOKEN
        ```

  - type: textarea
    id: notes
    attributes:
      label: 注意事項
      description: 実装時の注意点や重要な考慮事項
      value: |
        ### セキュリティ
        - GitHub App tokenは必ずSecretsとして管理
        - 最小権限の原則に従う
        - 定期的なトークンのローテーション

        ### パフォーマンス
        - Lighthouse実行回数の最適化
        - キャッシュ戦略の効果的な利用
        - バッジ更新の頻度制御

        ### メンテナンス
        - 定期的な依存関係の更新
        - スコア履歴の定期的なクリーンアップ
        - 設定ファイルの定期的な見直し

        ### 参考ドキュメント
        - [Lighthouse CI GitHub App](https://github.com/apps/lighthouse-ci)
        - [GitHub Actions Workflow Syntax](https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions)
        - [Next.js Performance Optimization](https://nextjs.org/docs/app/building-your-application/optimizing)